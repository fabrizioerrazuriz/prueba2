name: CI/CD for ECS

on:
  push:
    branches:
      - main  # Ejecutar el pipeline cada vez que se haga un push en la rama "main"

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest  # Usar la última versión de Ubuntu

    steps:
      # Paso 1: Checkout del código
      - name: Checkout code
        uses: actions/checkout@v3

      # Paso 2: Configurar las credenciales de AWS
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2  # Cambia la región si es necesario

      # Paso 3: Loguearse en Amazon ECR
      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      # Paso 4: Construir la imagen Docker usando el Dockerfile
      - name: Build Docker image
        run: |
          IMAGE_URI=971422693729.dkr.ecr.us-east-2.amazonaws.com/prueba-2:latest  # Reemplaza con tu URI de ECR
          docker build -t $IMAGE_URI .  # Construir la imagen Docker desde el Dockerfile en la raíz
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV  # Guardar el URI de la imagen en el entorno

      # Paso 5: Push de la imagen Docker a Amazon ECR
      - name: Push Docker image to Amazon ECR
        run: |
          docker push $IMAGE_URI  # Subir la imagen construida a Amazon ECR

      # Paso 6: Desplegar la imagen en ECS
      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ecs-task-definition.json  # Define tu archivo task definition aquí
          service: api-service  # Cambia por tu nombre de servicio ECS
          cluster: MyCluster  # Cambia por tu nombre de clúster ECS
          wait-for-service-stability: true
